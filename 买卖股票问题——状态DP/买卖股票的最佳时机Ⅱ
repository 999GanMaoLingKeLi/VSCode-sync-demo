prices = [7,1,5,3,6,4]
from functools import cache
n=len(prices)
@cache
def dfs(i,hold):
    if i<0:
        return 0 if hold==0 else float('-inf')
    if hold==0:
        return max(dfs(i-1,1)+prices[i],dfs(i-1,0))
    if hold==1:
        return max(dfs(i-1,0)-prices[i],dfs(i-1,1))
print(dfs(n-1,0))
##递推
prices = [7,1,5,3,6,4]
n=len(prices)
dp=[[0]*2 for _ in range(n+1)]
dp[0][0]=0
dp[0][1]=float('-inf')
for i,price in enumerate(prices):
    dp[i+1][0]=max(dp[i][1]+price,dp[i][0])
    dp[i+1][1]=max(dp[i][0]-price,dp[i][1]) 
print(dp[n][0])
##状态压缩      
prices = [7,1,5,3,6,4]
n=len(prices)
dp=[0,float('-inf')]
for i in range(n):
    dp[0],dp[1]=max(dp[1]+prices[i],dp[0]),max(dp[0]-prices[i],dp[1])
print(dp[0])
f0=0
f1=float('-inf')
for price in prices:
    f0, f1 = max(f1 + price, f0), max(f0 - price, f1)
print(f0)
# 买卖股票的最佳时机 I